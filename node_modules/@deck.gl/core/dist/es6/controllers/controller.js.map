{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","assert","NO_TRANSITION_PROPS","transitionDuration","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","_customEvents","onViewStateChange","onStateChange","handleEvent","bind","setProps","events","customEvents","toggleEvents","finalize","eventName","off","event","makeViewport","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","dragMode","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","Object","assign","getViewportProps","changed","oldViewState","getInteractiveState","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","isPanning","isRotating","pan","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","preventDefault","delta","scale","Math","exp","abs","zoom","isZooming","zoomStart","rotateStart","startPinchRotation","rotation","zoomEnd","rotateEnd","isZoomOut","_getTransitionProps","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState[this._panMove ? 'panEnd' : 'rotateEnd']();\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps(), {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}