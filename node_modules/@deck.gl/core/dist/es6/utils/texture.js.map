{"version":3,"sources":["../../../src/utils/texture.js"],"names":["Texture2D","DEFAULT_TEXTURE_PARAMETERS","internalTextures","createTexture","layer","image","gl","context","constructor","name","data","texture","parameters","props","textureParameters","id","destroyTexture","delete"],"mappings":";;;;;;AAAA,SAAQA,SAAR,QAAwB,eAAxB;AAGA,MAAMC,0BAA0B,GAAG;AACjC,eADiC;AAEjC,eAFiC;AAGjC,gBAHiC;AAIjC;AAJiC,CAAnC;AAQA,MAAMC,gBAAgB,GAAG,EAAzB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AAC1C,QAAMC,EAAE,GAAGF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACG,OAAN,CAAcD,EAA1C;;AACA,MAAI,CAACA,EAAD,IAAO,CAACD,KAAZ,EAAmB;AACjB,WAAO,IAAP;AACD;;AAMD,MAAIA,KAAK,YAAYL,SAArB,EAAgC;AAC9B,WAAOK,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,CAACG,WAAN,IAAqBH,KAAK,CAACG,WAAN,CAAkBC,IAAlB,KAA2B,QAApD,EAA8D;AAEnEJ,IAAAA,KAAK,GAAG;AAACK,MAAAA,IAAI,EAAEL;AAAP,KAAR;AACD;;AAED,QAAMM,OAAO,GAAG,IAAIX,SAAJ,CAAcM,EAAd,kCACXD,KADW;AAEdO,IAAAA,UAAU,kCAAMX,0BAAN,GAAqCG,KAAK,CAACS,KAAN,CAAYC,iBAAjD;AAFI,KAAhB;AAKAZ,EAAAA,gBAAgB,CAACS,OAAO,CAACI,EAAT,CAAhB,GAA+B,IAA/B;AACA,SAAOJ,OAAP;AACD;AAED,OAAO,SAASK,cAAT,CAAwBL,OAAxB,EAAiC;AACtC,MAAI,CAACA,OAAD,IAAY,EAAEA,OAAO,YAAYX,SAArB,CAAhB,EAAiD;AAC/C;AACD;;AACD,MAAIE,gBAAgB,CAACS,OAAO,CAACI,EAAT,CAApB,EAAkC;AAChCJ,IAAAA,OAAO,CAACM,MAAR;AACA,WAAOf,gBAAgB,CAACS,OAAO,CAACI,EAAT,CAAvB;AACD;AACF","sourcesContent":["import {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\n// Track the textures that are created by us. They need to be released when they are no longer used.\nconst internalTextures = {};\n\nexport function createTexture(layer, image) {\n  const gl = layer.context && layer.context.gl;\n  if (!gl || !image) {\n    return null;\n  }\n\n  // image could be one of:\n  //  - Texture2D\n  //  - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap\n  //  - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}\n  if (image instanceof Texture2D) {\n    return image;\n  } else if (image.constructor && image.constructor.name !== 'Object') {\n    // Browser object\n    image = {data: image};\n  }\n\n  const texture = new Texture2D(gl, {\n    ...image,\n    parameters: {...DEFAULT_TEXTURE_PARAMETERS, ...layer.props.textureParameters}\n  });\n  // Track this texture\n  internalTextures[texture.id] = true;\n  return texture;\n}\n\nexport function destroyTexture(texture) {\n  if (!texture || !(texture instanceof Texture2D)) {\n    return;\n  }\n  if (internalTextures[texture.id]) {\n    texture.delete();\n    delete internalTextures[texture.id];\n  }\n}\n"],"file":"texture.js"}