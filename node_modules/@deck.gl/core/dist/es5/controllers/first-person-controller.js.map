{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","width","height","longitude","latitude","startBearing","startPitch","startZoomPosition","startZoom","_interactiveState","use2D","spherical","SphericalCoordinates","_viewportProps","direction","toVector3","normalize","pos","_getUpdatedState","deltaScaleX","deltaScaleY","Number","isFinite","zoom","scale","getDirection","_move","Math","log2","speed","rotateZ","radians","PI","negate","viewState","fromProps","getViewportProps","props","Object","assign","abs","fromPosition","delta","Vector3","add","newProps","ViewState","FirstPersonController","Controller"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    return this._getUpdatedState({\n      bearing: startBearing - deltaScaleX * 180,\n      pitch: startPitch - deltaScaleY * 90\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._interactiveState;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"],"file":"first-person-controller.js"}