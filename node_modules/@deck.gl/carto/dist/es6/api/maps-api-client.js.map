{"version":3,"sources":["../../../src/api/maps-api-client.js"],"names":["getDefaultCredentials","getMapsVersion","DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","getTileJSON","mapConfig","credentials","creds","layergroup","instantiateMap","metadata","tilejson","vector","Error","url","buildURL","response","fetch","headers","Accept","error","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","cfg","encodedApiKey","encodeParameter","encodedClient","parameters","mapsUrl","join","replace","region","name","value","encodeURIComponent"],"mappings":"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","sourcesContent":["import {getDefaultCredentials, getMapsVersion} from '../config';\n\nconst DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nconst DEFAULT_REGION_COMPONENT_IN_URL = '{region}';\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getTileJSON(mapConfig, credentials) {\n  const creds = {...getDefaultCredentials(), ...credentials};\n  switch (getMapsVersion(creds)) {\n    case 'v1':\n      // Maps API v1\n      const layergroup = await instantiateMap({mapConfig, credentials: creds});\n      return layergroup.metadata.tilejson.vector;\n\n    case 'v2':\n      // Maps API v2\n      return await instantiateMap({mapConfig, credentials: creds});\n\n    default:\n      throw new Error('Invalid maps API version. It shoud be v1 or v2');\n  }\n}\n\n/**\n * Instantiate a map using Maps API\n */\nasync function instantiateMap({mapConfig, credentials}) {\n  const url = buildURL({mapConfig, credentials});\n\n  let response;\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, json, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e = getMapsVersion() === 'v1' ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURL({mapConfig, credentials}) {\n  const cfg = JSON.stringify(mapConfig);\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  const parameters = [encodedApiKey, encodedClient];\n  return `${mapsUrl(credentials)}/tilejson?${parameters.join('&')}&${encodeParameter(\n    'config',\n    cfg\n  )}`;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\n/**\n * Simple encode parameter\n */\nfunction encodeParameter(name, value) {\n  return `${name}=${encodeURIComponent(value)}`;\n}\n"],"file":"maps-api-client.js"}