{"version":3,"sources":["../../../src/layers/carto-sql-layer.js"],"names":["CartoLayer","getMapsVersion","defaultProps","bufferSize","tileExtent","uniqueIdProperty","CartoSQLLayer","buildMapConfig","data","props","version","creds","isSQL","search","sql","buffersize","mvt","layers","type","options","trim","vector_extent","buffer_size","tile_extent","source","Error","layerName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAAQC,cAAR,QAA6B,WAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,UAAU,EAAE,IAFO;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAArB;AAMA,eAAe,MAAMC,aAAN,SAA4BN,UAA5B,CAAuC;AACpDO,EAAAA,cAAc,GAAG;AACf,UAAM;AAACC,MAAAA,IAAD;AAAOL,MAAAA,UAAP;AAAmBC,MAAAA;AAAnB,QAAiC,KAAKK,KAA5C;AAEA,UAAMC,OAAO,GAAGT,cAAc,CAAC,KAAKQ,KAAL,CAAWE,KAAZ,CAA9B;AACA,UAAMC,KAAK,GAAGJ,IAAI,CAACK,MAAL,CAAY,GAAZ,IAAmB,CAAC,CAAlC;AACA,UAAMC,GAAG,GAAGF,KAAK,GAAGJ,IAAH,2BAA2BA,IAA3B,CAAjB;;AAEA,YAAQE,OAAR;AACE,WAAK,IAAL;AAEE,eAAO;AACLA,UAAAA,OAAO,EAAE,OADJ;AAELK,UAAAA,UAAU,EAAE;AACVC,YAAAA,GAAG,EAAEb;AADK,WAFP;AAKLc,UAAAA,MAAM,EAAE,CACN;AACEC,YAAAA,IAAI,EAAE,QADR;AAEEC,YAAAA,OAAO,EAAE;AACPL,cAAAA,GAAG,EAAEA,GAAG,CAACM,IAAJ,EADE;AAEPC,cAAAA,aAAa,EAAEjB;AAFR;AAFX,WADM;AALH,SAAP;;AAgBF,WAAK,IAAL;AAEE,eAAO;AACLM,UAAAA,OAAO,EAAE,OADJ;AAELY,UAAAA,WAAW,EAAEnB,UAFR;AAGLoB,UAAAA,WAAW,EAAEnB,UAHR;AAILa,UAAAA,MAAM,EAAE,CACN;AACEC,YAAAA,IAAI,EAAE,KADR;AAEEM,YAAAA,MAAM,EAAE,UAFV;AAGEL,YAAAA,OAAO,EAAE;AACPL,cAAAA,GAAG,EAAEA,GAAG,CAACM,IAAJ,EADE;AAEPC,cAAAA,aAAa,EAAEjB;AAFR;AAHX,WADM;AAJH,SAAP;;AAeF;AACE,cAAM,IAAIqB,KAAJ,yDAA2Df,OAA3D,EAAN;AArCJ;AAuCD;;AA/CmD;AAkDtDJ,aAAa,CAACoB,SAAd,GAA0B,eAA1B;AACApB,aAAa,CAACJ,YAAd,GAA6BA,YAA7B","sourcesContent":["import CartoLayer from './carto-layer';\nimport {getMapsVersion} from '../config';\n\nconst defaultProps = {\n  bufferSize: 16, // MVT buffersize in pixels,\n  tileExtent: 4096, // Tile extent in tile coordinate space (MVT spec.)\n  uniqueIdProperty: 'cartodb_id'\n};\n\nexport default class CartoSQLLayer extends CartoLayer {\n  buildMapConfig() {\n    const {data, bufferSize, tileExtent} = this.props;\n\n    const version = getMapsVersion(this.props.creds);\n    const isSQL = data.search(' ') > -1;\n    const sql = isSQL ? data : `SELECT * FROM ${data}`;\n\n    switch (version) {\n      case 'v1':\n        // Map config v1\n        return {\n          version: '1.3.1',\n          buffersize: {\n            mvt: bufferSize\n          },\n          layers: [\n            {\n              type: 'mapnik',\n              options: {\n                sql: sql.trim(),\n                vector_extent: tileExtent\n              }\n            }\n          ]\n        };\n\n      case 'v2':\n        // Map config v2\n        return {\n          version: '2.0.0',\n          buffer_size: bufferSize,\n          tile_extent: tileExtent,\n          layers: [\n            {\n              type: 'sql',\n              source: 'postgres',\n              options: {\n                sql: sql.trim(),\n                vector_extent: tileExtent\n              }\n            }\n          ]\n        };\n      default:\n        throw new Error(`Cannot build MapConfig for unmatching version ${version}`);\n    }\n  }\n}\n\nCartoSQLLayer.layerName = 'CartoSQLLayer';\nCartoSQLLayer.defaultProps = defaultProps;\n"],"file":"carto-sql-layer.js"}