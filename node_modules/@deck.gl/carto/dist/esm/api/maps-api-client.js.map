{"version":3,"sources":["../../../src/api/maps-api-client.js"],"names":["getDefaultCredentials","getMapsVersion","DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","getTileJSON","mapConfig","credentials","creds","instantiateMap","layergroup","metadata","tilejson","vector","Error","url","buildURL","fetch","headers","Accept","response","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","error","cfg","encodedApiKey","encodeParameter","encodedClient","parameters","mapsUrl","join","replace","region","name","value","encodeURIComponent"],"mappings":"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","sourcesContent":["import {getDefaultCredentials, getMapsVersion} from '../config';\n\nconst DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nconst DEFAULT_REGION_COMPONENT_IN_URL = '{region}';\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getTileJSON(mapConfig, credentials) {\n  const creds = {...getDefaultCredentials(), ...credentials};\n  switch (getMapsVersion(creds)) {\n    case 'v1':\n      // Maps API v1\n      const layergroup = await instantiateMap({mapConfig, credentials: creds});\n      return layergroup.metadata.tilejson.vector;\n\n    case 'v2':\n      // Maps API v2\n      return await instantiateMap({mapConfig, credentials: creds});\n\n    default:\n      throw new Error('Invalid maps API version. It shoud be v1 or v2');\n  }\n}\n\n/**\n * Instantiate a map using Maps API\n */\nasync function instantiateMap({mapConfig, credentials}) {\n  const url = buildURL({mapConfig, credentials});\n\n  let response;\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, json, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e = getMapsVersion() === 'v1' ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURL({mapConfig, credentials}) {\n  const cfg = JSON.stringify(mapConfig);\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  const parameters = [encodedApiKey, encodedClient];\n  return `${mapsUrl(credentials)}/tilejson?${parameters.join('&')}&${encodeParameter(\n    'config',\n    cfg\n  )}`;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\n/**\n * Simple encode parameter\n */\nfunction encodeParameter(name, value) {\n  return `${name}=${encodeURIComponent(value)}`;\n}\n"],"file":"maps-api-client.js"}