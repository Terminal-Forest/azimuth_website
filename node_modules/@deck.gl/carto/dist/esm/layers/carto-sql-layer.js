import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import CartoLayer from './carto-layer';
import { getMapsVersion } from '../config';
var defaultProps = {
  bufferSize: 16,
  tileExtent: 4096,
  uniqueIdProperty: 'cartodb_id'
};

var CartoSQLLayer = function (_CartoLayer) {
  _inherits(CartoSQLLayer, _CartoLayer);

  var _super = _createSuper(CartoSQLLayer);

  function CartoSQLLayer() {
    _classCallCheck(this, CartoSQLLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoSQLLayer, [{
    key: "buildMapConfig",
    value: function buildMapConfig() {
      var _this$props = this.props,
          data = _this$props.data,
          bufferSize = _this$props.bufferSize,
          tileExtent = _this$props.tileExtent;
      var version = getMapsVersion(this.props.creds);
      var isSQL = data.search(' ') > -1;
      var sql = isSQL ? data : "SELECT * FROM ".concat(data);

      switch (version) {
        case 'v1':
          return {
            version: '1.3.1',
            buffersize: {
              mvt: bufferSize
            },
            layers: [{
              type: 'mapnik',
              options: {
                sql: sql.trim(),
                vector_extent: tileExtent
              }
            }]
          };

        case 'v2':
          return {
            version: '2.0.0',
            buffer_size: bufferSize,
            tile_extent: tileExtent,
            layers: [{
              type: 'sql',
              source: 'postgres',
              options: {
                sql: sql.trim(),
                vector_extent: tileExtent
              }
            }]
          };

        default:
          throw new Error("Cannot build MapConfig for unmatching version ".concat(version));
      }
    }
  }]);

  return CartoSQLLayer;
}(CartoLayer);

export { CartoSQLLayer as default };
CartoSQLLayer.layerName = 'CartoSQLLayer';
CartoSQLLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-sql-layer.js.map