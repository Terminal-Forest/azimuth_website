{"version":3,"sources":["../../../src/layers/carto-sql-layer.js"],"names":["CartoLayer","getMapsVersion","defaultProps","bufferSize","tileExtent","uniqueIdProperty","CartoSQLLayer","props","data","version","creds","isSQL","search","sql","buffersize","mvt","layers","type","options","trim","vector_extent","buffer_size","tile_extent","source","Error","layerName"],"mappings":";;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAAQC,cAAR,QAA6B,WAA7B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,UAAU,EAAE,IAFO;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAArB;;IAMqBC,a;;;;;;;;;;;;;qCACF;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACRC,IADQ,eACRA,IADQ;AAAA,UACFL,UADE,eACFA,UADE;AAAA,UACUC,UADV,eACUA,UADV;AAGf,UAAMK,OAAO,GAAGR,cAAc,CAAC,KAAKM,KAAL,CAAWG,KAAZ,CAA9B;AACA,UAAMC,KAAK,GAAGH,IAAI,CAACI,MAAL,CAAY,GAAZ,IAAmB,CAAC,CAAlC;AACA,UAAMC,GAAG,GAAGF,KAAK,GAAGH,IAAH,2BAA2BA,IAA3B,CAAjB;;AAEA,cAAQC,OAAR;AACE,aAAK,IAAL;AAEE,iBAAO;AACLA,YAAAA,OAAO,EAAE,OADJ;AAELK,YAAAA,UAAU,EAAE;AACVC,cAAAA,GAAG,EAAEZ;AADK,aAFP;AAKLa,YAAAA,MAAM,EAAE,CACN;AACEC,cAAAA,IAAI,EAAE,QADR;AAEEC,cAAAA,OAAO,EAAE;AACPL,gBAAAA,GAAG,EAAEA,GAAG,CAACM,IAAJ,EADE;AAEPC,gBAAAA,aAAa,EAAEhB;AAFR;AAFX,aADM;AALH,WAAP;;AAgBF,aAAK,IAAL;AAEE,iBAAO;AACLK,YAAAA,OAAO,EAAE,OADJ;AAELY,YAAAA,WAAW,EAAElB,UAFR;AAGLmB,YAAAA,WAAW,EAAElB,UAHR;AAILY,YAAAA,MAAM,EAAE,CACN;AACEC,cAAAA,IAAI,EAAE,KADR;AAEEM,cAAAA,MAAM,EAAE,UAFV;AAGEL,cAAAA,OAAO,EAAE;AACPL,gBAAAA,GAAG,EAAEA,GAAG,CAACM,IAAJ,EADE;AAEPC,gBAAAA,aAAa,EAAEhB;AAFR;AAHX,aADM;AAJH,WAAP;;AAeF;AACE,gBAAM,IAAIoB,KAAJ,yDAA2Df,OAA3D,EAAN;AArCJ;AAuCD;;;;EA/CwCT,U;;SAAtBM,a;AAkDrBA,aAAa,CAACmB,SAAd,GAA0B,eAA1B;AACAnB,aAAa,CAACJ,YAAd,GAA6BA,YAA7B","sourcesContent":["import CartoLayer from './carto-layer';\nimport {getMapsVersion} from '../config';\n\nconst defaultProps = {\n  bufferSize: 16, // MVT buffersize in pixels,\n  tileExtent: 4096, // Tile extent in tile coordinate space (MVT spec.)\n  uniqueIdProperty: 'cartodb_id'\n};\n\nexport default class CartoSQLLayer extends CartoLayer {\n  buildMapConfig() {\n    const {data, bufferSize, tileExtent} = this.props;\n\n    const version = getMapsVersion(this.props.creds);\n    const isSQL = data.search(' ') > -1;\n    const sql = isSQL ? data : `SELECT * FROM ${data}`;\n\n    switch (version) {\n      case 'v1':\n        // Map config v1\n        return {\n          version: '1.3.1',\n          buffersize: {\n            mvt: bufferSize\n          },\n          layers: [\n            {\n              type: 'mapnik',\n              options: {\n                sql: sql.trim(),\n                vector_extent: tileExtent\n              }\n            }\n          ]\n        };\n\n      case 'v2':\n        // Map config v2\n        return {\n          version: '2.0.0',\n          buffer_size: bufferSize,\n          tile_extent: tileExtent,\n          layers: [\n            {\n              type: 'sql',\n              source: 'postgres',\n              options: {\n                sql: sql.trim(),\n                vector_extent: tileExtent\n              }\n            }\n          ]\n        };\n      default:\n        throw new Error(`Cannot build MapConfig for unmatching version ${version}`);\n    }\n  }\n}\n\nCartoSQLLayer.layerName = 'CartoSQLLayer';\nCartoSQLLayer.defaultProps = defaultProps;\n"],"file":"carto-sql-layer.js"}