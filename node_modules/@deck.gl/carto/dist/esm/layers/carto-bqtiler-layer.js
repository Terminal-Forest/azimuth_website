import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import CartoLayer from './carto-layer';

var CartoBQTilerLayer = function (_CartoLayer) {
  _inherits(CartoBQTilerLayer, _CartoLayer);

  var _super = _createSuper(CartoBQTilerLayer);

  function CartoBQTilerLayer() {
    _classCallCheck(this, CartoBQTilerLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoBQTilerLayer, [{
    key: "buildMapConfig",
    value: function buildMapConfig() {
      return {
        version: '2.0.0',
        layers: [{
          type: 'tileset',
          source: 'bigquery',
          options: {
            tileset: this.props.data
          }
        }]
      };
    }
  }]);

  return CartoBQTilerLayer;
}(CartoLayer);

export { CartoBQTilerLayer as default };
CartoBQTilerLayer.layerName = 'CartoBQTilerLayer';
//# sourceMappingURL=carto-bqtiler-layer.js.map