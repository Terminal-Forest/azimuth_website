"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTileJSON = getTileJSON;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_USER_COMPONENT_IN_URL = '{user}';
var DEFAULT_REGION_COMPONENT_IN_URL = '{region}';

function getTileJSON(_x, _x2) {
  return _getTileJSON.apply(this, arguments);
}

function _getTileJSON() {
  _getTileJSON = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(mapConfig, credentials) {
    var creds, layergroup;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            creds = _objectSpread(_objectSpread({}, (0, _config.getDefaultCredentials)()), credentials);
            _context.t0 = (0, _config.getMapsVersion)(creds);
            _context.next = _context.t0 === 'v1' ? 4 : _context.t0 === 'v2' ? 8 : 11;
            break;

          case 4:
            _context.next = 6;
            return instantiateMap({
              mapConfig: mapConfig,
              credentials: creds
            });

          case 6:
            layergroup = _context.sent;
            return _context.abrupt("return", layergroup.metadata.tilejson.vector);

          case 8:
            _context.next = 10;
            return instantiateMap({
              mapConfig: mapConfig,
              credentials: creds
            });

          case 10:
            return _context.abrupt("return", _context.sent);

          case 11:
            throw new Error('Invalid maps API version. It shoud be v1 or v2');

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getTileJSON.apply(this, arguments);
}

function instantiateMap(_x3) {
  return _instantiateMap.apply(this, arguments);
}

function _instantiateMap() {
  _instantiateMap = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(_ref) {
    var mapConfig, credentials, url, response, json;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mapConfig = _ref.mapConfig, credentials = _ref.credentials;
            url = buildURL({
              mapConfig: mapConfig,
              credentials: credentials
            });
            _context2.prev = 2;
            _context2.next = 5;
            return fetch(url, {
              headers: {
                Accept: 'application/json'
              }
            });

          case 5:
            response = _context2.sent;
            _context2.next = 11;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](2);
            throw new Error("Failed to connect to Maps API: ".concat(_context2.t0));

          case 11:
            _context2.next = 13;
            return response.json();

          case 13:
            json = _context2.sent;

            if (!response.ok) {
              dealWithError({
                response: response,
                json: json,
                credentials: credentials
              });
            }

            return _context2.abrupt("return", json);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 8]]);
  }));
  return _instantiateMap.apply(this, arguments);
}

function dealWithError(_ref2) {
  var response = _ref2.response,
      json = _ref2.json,
      credentials = _ref2.credentials;

  switch (response.status) {
    case 401:
      throw new Error("Unauthorized access to Maps API: invalid combination of user ('".concat(credentials.username, "') and apiKey ('").concat(credentials.apiKey, "')"));

    case 403:
      throw new Error("Unauthorized access to dataset: the provided apiKey('".concat(credentials.apiKey, "') doesn't provide access to the requested data"));

    default:
      var e = (0, _config.getMapsVersion)() === 'v1' ? JSON.stringify(json.errors) : json.error;
      throw new Error(e);
  }
}

function buildURL(_ref3) {
  var mapConfig = _ref3.mapConfig,
      credentials = _ref3.credentials;
  var cfg = JSON.stringify(mapConfig);
  var encodedApiKey = encodeParameter('api_key', credentials.apiKey);
  var encodedClient = encodeParameter('client', "deck-gl-carto");
  var parameters = [encodedApiKey, encodedClient];
  return "".concat(mapsUrl(credentials), "/tilejson?").concat(parameters.join('&'), "&").concat(encodeParameter('config', cfg));
}

function mapsUrl(credentials) {
  return credentials.mapsUrl.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username).replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);
}

function encodeParameter(name, value) {
  return "".concat(name, "=").concat(encodeURIComponent(value));
}
//# sourceMappingURL=maps-api-client.js.map