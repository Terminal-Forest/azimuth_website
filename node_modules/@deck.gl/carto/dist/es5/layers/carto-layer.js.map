{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["defaultProps","data","credentials","onDataLoad","type","value","tilejson","compare","onDataError","err","console","error","CartoLayer","state","changeFlags","props","dataChanged","_updateData","_updateTileJSON","setState","Error","buildMapConfig","info","pickingEvent","getSubLayers","mvtLayer","onHover","updateTriggers","MVTLayer","getSubLayerProps","id","CompositeLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAC,QAAQ,EAAI,CAAE,CAAxC;AAA0CC,IAAAA,OAAO,EAAE;AAAnD,GAHO;AAKnBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAI,GAAG;AAAA,aAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,KAA7B;AAAqDF,IAAAA,OAAO,EAAE;AAA9D;AALM,CAArB;;IAQqBK,U;;;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXP,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;;sCAE0B;AAAA,UAAdQ,WAAc,QAAdA,WAAc;AAAA,UAClBb,IADkB,GACV,KAAKc,KADK,CAClBd,IADkB;;AAEzB,UAAIa,WAAW,CAACE,WAAZ,IAA2Bf,IAA/B,EAAqC;AACnC,aAAKgB,WAAL;AACD;AACF;;;;;;;;;;;;uBAI0B,KAAKC,eAAL,E;;;AAAjBZ,gBAAAA,Q;AACN,qBAAKa,QAAL,CAAc;AAACb,kBAAAA,QAAQ,EAARA;AAAD,iBAAd;AACA,qBAAKS,KAAL,CAAWZ,UAAX,CAAsBG,QAAtB;;;;;;;AAEA,qBAAKS,KAAL,CAAWP,WAAX;;;;;;;;;;;;;;;;;;qCAIa;AACf,YAAM,IAAIY,KAAJ,CAAU,+DAAV,CAAN;AACD;;;;;;;;;;;uBAGwB,gCAAY,KAAKC,cAAL,CAAoB,KAAKN,KAAzB,CAAZ,EAA6C,KAAKA,KAAL,CAAWb,WAAxD,C;;;AAAjBI,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;4BAGDgB,I,EAAMC,Y,EAAc;AAAA,+BACP,KAAKC,YAAL,EADO;AAAA;AAAA,UACnBC,QADmB;;AAE1B,aAAOA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiBJ,IAAjB,EAAuBC,YAAvB,CAAH,6GAAwDD,IAAxD,EAA8DC,YAA9D,CAAf;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAKV,KAAL,CAAWP,QAAhB,EAA0B,OAAO,IAAP;AADb,UAGNqB,cAHM,GAGY,KAAKZ,KAHjB,CAGNY,cAHM;AAKb,aAAO,IAAIC,mBAAJ,CACL,KAAKb,KADA,EAEL,KAAKc,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,KADgB;AAEpB7B,QAAAA,IAAI,EAAE,KAAKY,KAAL,CAAWP,QAFG;AAGpBqB,QAAAA,cAAc,EAAdA;AAHoB,OAAtB,CAFK,CAAP;AAQD;;;EAnDqCI,oB;;;AAsDxCnB,UAAU,CAACoB,SAAX,GAAuB,YAAvB;AACApB,UAAU,CAACZ,YAAX,GAA0BA,YAA1B","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {getTileJSON} from '../api/maps-api-client';\n\nconst defaultProps = {\n  data: null,\n  credentials: null,\n  onDataLoad: {type: 'function', value: tilejson => {}, compare: false},\n  // eslint-disable-next-line\n  onDataError: {type: 'function', value: err => console.error(err), compare: false}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tilejson: null\n    };\n  }\n\n  updateState({changeFlags}) {\n    const {data} = this.props;\n    if (changeFlags.dataChanged && data) {\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const tilejson = await this._updateTileJSON();\n      this.setState({tilejson});\n      this.props.onDataLoad(tilejson);\n    } catch (err) {\n      this.props.onDataError(err);\n    }\n  }\n\n  buildMapConfig() {\n    throw new Error('You must use one of the specific carto layers: BQ or SQL type');\n  }\n\n  async _updateTileJSON() {\n    const tilejson = await getTileJSON(this.buildMapConfig(this.props), this.props.credentials);\n    return tilejson;\n  }\n\n  onHover(info, pickingEvent) {\n    const [mvtLayer] = this.getSubLayers();\n    return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : super.onHover(info, pickingEvent);\n  }\n\n  renderLayers() {\n    if (!this.state.tilejson) return null;\n\n    const {updateTriggers} = this.props;\n\n    return new MVTLayer(\n      this.props,\n      this.getSubLayerProps({\n        id: 'mvt',\n        data: this.state.tilejson,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}