"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _cartoLayer = _interopRequireDefault(require("./carto-layer"));

var _config = require("../config");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var defaultProps = {
  bufferSize: 16,
  tileExtent: 4096,
  uniqueIdProperty: 'cartodb_id'
};

var CartoSQLLayer = function (_CartoLayer) {
  (0, _inherits2["default"])(CartoSQLLayer, _CartoLayer);

  var _super = _createSuper(CartoSQLLayer);

  function CartoSQLLayer() {
    (0, _classCallCheck2["default"])(this, CartoSQLLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(CartoSQLLayer, [{
    key: "buildMapConfig",
    value: function buildMapConfig() {
      var _this$props = this.props,
          data = _this$props.data,
          bufferSize = _this$props.bufferSize,
          tileExtent = _this$props.tileExtent;
      var version = (0, _config.getMapsVersion)(this.props.creds);
      var isSQL = data.search(' ') > -1;
      var sql = isSQL ? data : "SELECT * FROM ".concat(data);

      switch (version) {
        case 'v1':
          return {
            version: '1.3.1',
            buffersize: {
              mvt: bufferSize
            },
            layers: [{
              type: 'mapnik',
              options: {
                sql: sql.trim(),
                vector_extent: tileExtent
              }
            }]
          };

        case 'v2':
          return {
            version: '2.0.0',
            buffer_size: bufferSize,
            tile_extent: tileExtent,
            layers: [{
              type: 'sql',
              source: 'postgres',
              options: {
                sql: sql.trim(),
                vector_extent: tileExtent
              }
            }]
          };

        default:
          throw new Error("Cannot build MapConfig for unmatching version ".concat(version));
      }
    }
  }]);
  return CartoSQLLayer;
}(_cartoLayer["default"]);

exports["default"] = CartoSQLLayer;
CartoSQLLayer.layerName = 'CartoSQLLayer';
CartoSQLLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-sql-layer.js.map