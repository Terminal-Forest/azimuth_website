"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _core = require("@deck.gl/core");

var _geoLayers = require("@deck.gl/geo-layers");

var _mapsApiClient = require("../api/maps-api-client");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var defaultProps = {
  data: null,
  credentials: null,
  onDataLoad: {
    type: 'function',
    value: function value(tilejson) {},
    compare: false
  },
  onDataError: {
    type: 'function',
    value: function value(err) {
      return console.error(err);
    },
    compare: false
  }
};

var CartoLayer = function (_CompositeLayer) {
  (0, _inherits2["default"])(CartoLayer, _CompositeLayer);

  var _super = _createSuper(CartoLayer);

  function CartoLayer() {
    (0, _classCallCheck2["default"])(this, CartoLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(CartoLayer, [{
    key: "initializeState",
    value: function initializeState() {
      this.state = {
        tilejson: null
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var changeFlags = _ref.changeFlags;
      var data = this.props.data;

      if (changeFlags.dataChanged && data) {
        this._updateData();
      }
    }
  }, {
    key: "_updateData",
    value: function () {
      var _updateData2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        var tilejson;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this._updateTileJSON();

              case 3:
                tilejson = _context.sent;
                this.setState({
                  tilejson: tilejson
                });
                this.props.onDataLoad(tilejson);
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                this.props.onDataError(_context.t0);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 8]]);
      }));

      function _updateData() {
        return _updateData2.apply(this, arguments);
      }

      return _updateData;
    }()
  }, {
    key: "buildMapConfig",
    value: function buildMapConfig() {
      throw new Error('You must use one of the specific carto layers: BQ or SQL type');
    }
  }, {
    key: "_updateTileJSON",
    value: function () {
      var _updateTileJSON2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
        var tilejson;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _mapsApiClient.getTileJSON)(this.buildMapConfig(this.props), this.props.credentials);

              case 2:
                tilejson = _context2.sent;
                return _context2.abrupt("return", tilejson);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _updateTileJSON() {
        return _updateTileJSON2.apply(this, arguments);
      }

      return _updateTileJSON;
    }()
  }, {
    key: "onHover",
    value: function onHover(info, pickingEvent) {
      var _this$getSubLayers = this.getSubLayers(),
          _this$getSubLayers2 = (0, _slicedToArray2["default"])(_this$getSubLayers, 1),
          mvtLayer = _this$getSubLayers2[0];

      return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : (0, _get2["default"])((0, _getPrototypeOf2["default"])(CartoLayer.prototype), "onHover", this).call(this, info, pickingEvent);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      if (!this.state.tilejson) return null;
      var updateTriggers = this.props.updateTriggers;
      return new _geoLayers.MVTLayer(this.props, this.getSubLayerProps({
        id: 'mvt',
        data: this.state.tilejson,
        updateTriggers: updateTriggers
      }));
    }
  }]);
  return CartoLayer;
}(_core.CompositeLayer);

exports["default"] = CartoLayer;
CartoLayer.layerName = 'CartoLayer';
CartoLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-layer.js.map