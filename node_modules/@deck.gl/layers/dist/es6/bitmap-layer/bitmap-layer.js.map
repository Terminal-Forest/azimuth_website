{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","project32","picking","COORDINATE_SYSTEM","Model","Geometry","lngLatToWorld","createMesh","vs","fs","defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","setState","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","_getCoordinateUniforms","normalizedBounds","Number","isFinite","viewport","resolution","Object","assign","id","geometry","drawMode","isInstanced","draw","opts","uniforms","coordinateConversion","setUniforms","bitmapTexture","map","x","slice","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          vertexCount: 6\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {model, coordinateConversion, bounds} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!Number.isFinite(bounds[0])) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}