{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","project32","picking","COORDINATE_SYSTEM","Model","Geometry","lngLatToWorld","createMesh","vs","fs","defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","modules","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","props","oldProps","changeFlags","extensionsChanged","gl","context","model","setState","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","_getCoordinateUniforms","normalizedBounds","Number","isFinite","viewport","resolution","Object","assign","getShaders","id","geometry","drawMode","isInstanced","opts","uniforms","coordinateConversion","setUniforms","bitmapTexture","map","x","slice","draw","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          vertexCount: 6\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {model, coordinateConversion, bounds} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!Number.isFinite(bounds[0])) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}