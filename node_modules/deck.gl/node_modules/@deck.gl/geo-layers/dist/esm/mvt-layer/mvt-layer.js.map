{"version":3,"sources":["../../../src/mvt-layer/mvt-layer.js"],"names":["Matrix4","MVTLoader","load","COORDINATE_SYSTEM","TileLayer","getURLFromTemplate","isURLTemplate","ClipExtension","WORLD_SIZE","defaultProps","uniqueIdProperty","type","value","highlightedFeatureId","onViewportChange","optional","compare","fetchTileJSON","url","Error","MVTLayer","setState","data","tileJSON","props","oldProps","context","changeFlags","dataChanged","_updateTileData","state","tileset","viewportChanged","isLoaded","_onViewportChange","onDataLoad","minZoom","maxZoom","tilejson","tiles","Number","isFinite","minzoom","maxzoom","tile","Promise","reject","options","getLoadOptions","mvt","coordinates","viewport","resolution","tileIndex","x","y","z","worldScale","Math","pow","xScale","yScale","xOffset","yOffset","modelMatrix","scale","autoHighlight","coordinateOrigin","coordinateSystem","CARTESIAN","extensions","info","pickingEvent","hoveredFeatureId","hoveredFeature","object","newHoveredFeatureId","getFeatureUniqueId","isFeatureIdPresent","isFeatureIdDefined","Array","isArray","featureIdToHighlight","findIndex","feature","maxObjects","deck","width","height","layerIds","id","pickObjects","maxFeatures","features","_pickObjects","featureCache","Set","renderedFeatures","f","featureId","push","has","add","getRenderedFeatures","bind","properties","undefined","layerName"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\nimport {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\n\nimport TileLayer from '../tile-layer/tile-layer';\nimport {getURLFromTemplate, isURLTemplate} from '../tile-layer/utils';\nimport ClipExtension from './clip-extension';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps = {\n  uniqueIdProperty: {type: 'string', value: ''},\n  highlightedFeatureId: null,\n  onViewportChange: {type: 'function', optional: true, value: null, compare: false}\n};\n\nasync function fetchTileJSON(url) {\n  try {\n    return await load(url);\n  } catch (error) {\n    throw new Error(`An error occurred fetching TileJSON: ${error}`);\n  }\n}\n\nexport default class MVTLayer extends TileLayer {\n  initializeState() {\n    super.initializeState();\n    this.setState({\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded() {\n    return this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      this._updateTileData({props});\n    }\n\n    if (this.state.data) {\n      super.updateState({props, oldProps, context, changeFlags});\n      const {tileset} = this.state;\n      if (changeFlags.viewportChanged && tileset.isLoaded) {\n        this._onViewportChange();\n      }\n    }\n  }\n\n  async _updateTileData({props}) {\n    const {onDataLoad} = this.props;\n    let {data} = props;\n    let tileJSON = null;\n    let {minZoom, maxZoom} = props;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      this.setState({data: null, tileJSON: null});\n      tileJSON = await fetchTileJSON(data);\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON);\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n\n      if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > minZoom) {\n        minZoom = tileJSON.minzoom;\n      }\n\n      if (\n        Number.isFinite(tileJSON.maxzoom) &&\n        (!Number.isFinite(maxZoom) || tileJSON.maxzoom < maxZoom)\n      ) {\n        maxZoom = tileJSON.maxzoom;\n      }\n    }\n\n    this.setState({data, tileJSON, minZoom, maxZoom});\n  }\n\n  renderLayers() {\n    if (!this.state.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(tile) {\n    const url = getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    let options = this.getLoadOptions();\n    options = {\n      ...options,\n      mvt: {\n        ...(options && options.mvt),\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: {x: tile.x, y: tile.y, z: tile.z}\n      }\n    };\n    return load(url, MVTLoader, options);\n  }\n\n  renderSubLayers(props) {\n    const {tile} = props;\n    const worldScale = Math.pow(2, tile.z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    return super.renderSubLayers(props);\n  }\n\n  onHover(info, pickingEvent) {\n    const {uniqueIdProperty, autoHighlight} = this.props;\n\n    if (autoHighlight) {\n      const {hoveredFeatureId} = this.state;\n      const hoveredFeature = info.object;\n      let newHoveredFeatureId;\n\n      if (hoveredFeature) {\n        newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      }\n\n      if (hoveredFeatureId !== newHoveredFeatureId) {\n        this.setState({hoveredFeatureId: newHoveredFeatureId});\n      }\n    }\n\n    return super.onHover(info, pickingEvent);\n  }\n\n  getHighlightedObjectIndex(tile) {\n    const {hoveredFeatureId} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId} = this.props;\n    const {data} = tile;\n\n    const isFeatureIdPresent =\n      isFeatureIdDefined(hoveredFeatureId) || isFeatureIdDefined(highlightedFeatureId);\n\n    if (!isFeatureIdPresent || !Array.isArray(data)) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isFeatureIdDefined(highlightedFeatureId)\n      ? highlightedFeatureId\n      : hoveredFeatureId;\n\n    return data.findIndex(\n      feature => getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight\n    );\n  }\n\n  _pickObjects(maxObjects) {\n    const {deck, viewport} = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck.pickObjects({x, y, width, height, layerIds, maxObjects});\n  }\n\n  getRenderedFeatures(maxFeatures = null) {\n    const features = this._pickObjects(maxFeatures);\n    const featureCache = new Set();\n    const renderedFeatures = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === -1) {\n        // we have no id for the feature, we just add to the list\n        renderedFeatures.push(f.object);\n      } else if (!featureCache.has(featureId)) {\n        // Add removing duplicates\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  _onViewportChange() {\n    const {onViewportChange} = this.props;\n    if (onViewportChange) {\n      const {viewport} = this.context;\n      onViewportChange({\n        getRenderedFeatures: this.getRenderedFeatures.bind(this),\n        viewport\n      });\n    }\n  }\n\n  _onViewportLoad() {\n    super._onViewportLoad();\n    this._onViewportChange();\n  }\n}\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return -1;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;\n"],"file":"mvt-layer.js"}